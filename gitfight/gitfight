#!/bin/bash

# Gracefully shutdown game
function closeGame {
  echo
  echo
  echo "GOODBYE!"
  echo
  exit
}

trap "closeGame;" INT

function performAttack {
  hit=0
  if [ "$1" = "J" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 4 ]; then
      hit=$[ ( $RANDOM % 10 ) + 8 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  elif [ "$1" = "U" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 8 ]; then
      hit=$[ ( $RANDOM % 10 ) + 16 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  elif [ "$1" = "L" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 6 ]; then
      hit=$[ ( $RANDOM % 10 ) + 11 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  else
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 9 ]; then
      hit=$[ ( $RANDOM % 10 ) + 21 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  fi
  if [ "$hit" != "0" ]; then
    echo "HIT!"
    opponentScore=`expr $opponentScore - $hit`
    echo "$opponent's health is now $opponentScore"
  else
    echo "MISS!"
    echo "$opponent's health is still $opponentScore"
  fi
}

function calculateScores {
  opponentScore=100
  myScore=100
  round=`cat "$logfile" | wc -l`
  round=`expr "$round" / 2 + "$round" % 2`
  while read line; do
    myLine=`echo "$line" | grep "$me"`
    opponentLine=`echo "$line" | grep "$opponent"`
    if ! [ -z "$myLine" ]; then
      # my lines log the damage done to opponent
      hit=`echo "$line" | cut -d, -f4 | cut -d" " -f1`
      damage=`echo "$line" | cut -d"," -f4 | cut -d" " -f2`
      if [ "$hit" = "HIT" ]; then
        opponentScore=`expr $opponentScore - $damage`
      fi
    elif ! [ -z "$opponentLine" ]; then
      # opponent lines log the damage done to myself
      hit=`echo "$line" | cut -d, -f4 | cut -d" " -f1`
      damage=`echo "$line" | cut -d"," -f4 | cut -d" " -f2`
      if [ "$hit" = "HIT" ]; then
        myScore=`expr $myScore - $damage`
      fi
    else
      echo
      echo "gitwar.log has incorrect syntax!"
      echo
      exit
    fi
  done < <( sed 1d "$logfile" )
}

function checkGameOver {
  if [[ "$myScore" -lt "0" || "$opponentScore" -lt "0" ]]; then
    echo "GAME OVER!"
    echo
    if [ "$myScore" -gt "$opponentScore" ]; then
      echo "$me WINS!"
    else
      echo "$opponent WINS!"
    fi
    echo
    # Someone's health is 0
    echo "$me's health: $myScore"
    echo "$opponent's health: $opponentScore"
    echo
    echo "If you'd like to play again excute '../gitwar -c'"
    echo

    getRecentEvent
    ../gitwar -s "$recentEvent"
    exit
  fi
}

function printRound {
  if [[ "$myScore" -gt "0" && "$opponentScore" -gt "0" ]]; then
    echo "[ROUND $round]"
    echo "$me's health: $myScore"
    echo "$opponent's health: $opponentScore"
    echo
  else
    checkGameOver
  fi
}

function getRecentEvent {
  opponentMove=`tail -1 gitwar.log`
  checkOpponent=`echo "$opponentMove" | cut -d, -f2`
  action=`echo "$opponentMove" | cut -d, -f3`
  if [ "$action" = "J" ]; then
    action="JAB"
  elif [ "$action" = "H" ]; then
    action="HAYMAKER"
  elif [ "$action" = "L" ]; then
    action="LEFT HOOK"
  else
    action="UPPERCUT"
  fi
  result=`echo "$opponentMove" | cut -d, -f4 | cut -d" " -f1`
  damage=`echo "$opponentMove" | cut -d, -f4 | cut -d" " -f2`
  if [ "$result" = "HIT" ]; then
    recentEvent="$opponent HIT! Threw a $action and knocked $damage points off your health."
  else
    recentEvent="$opponent MISSED"
  fi
}

function loop {
  while [ 1 = 1 ]; do
    getRecentEvent
    echo $reventEvent
    echo

    calculateScores
    printRound

    attack=''
    while [[ "$attack" != "J" && "$attack" != "H" && "$attack" != "U" && "$attack" != "L" ]]; do
      if ! [ -z "$attack" ]; then
        echo
        echo "Incorrect attack syntax. Please try again."
      fi
      echo "How would you like to attack?"
      echo "H - Haymaker, U - Uppercut"
      echo -n "L - Left Hook, J - Jab: "
      read attack
    done
    echo

    performAttack $attack
    echo "`date "+%Y-%m-%d %H:%M:%S %z"`,$me,$attack,$attackResult" >> gitwar.log
    echo -n "$score" | sed "s/$opponent [0-9]*/$opponent $opponentScore/" > gitwar.score
    echo



    # Call gitwar to give opponent a turn
    getRecentEvent
    checkGameOver
    ../gitwar "$recentEvent"

    echo
  done
}

echo
echo "Loading..."
../gitwar -p

echo
echo -n "[GITFIGHT!] "

# Initialize some stuff
logfile="gitwar.log"
log=`cat gitwar.log`
me=`git config "user.name"`
users=`cat gitwar.users`

# Check that the user can play and get the opponent's score
user1=`echo $users | cut -d" " -f1`
user2=`echo $users | cut -d" " -f2`
if [ "$me" = "$user1" ]; then
  opponent="$user2"
elif [ "$me" = "$user2" ]; then
  opponent="$user1"
else
  echo "You are not a player in this game. Check your git config for your 'user.name' setting. It should match one of the names in the gitwar.users file"
  echo
  exit
fi

echo "$me vs. $opponent"
echo

calculateScores
printRound

# If the player actually belongs in the game welcome them and
# ask what attack they'd like to perform
echo "Welcome back $me!"
echo

justWent=`tail -1 gitwar.log | grep $me`

if ! [ -z "$justWent" ]; then
  echo "Looks like it's not your turn. Please wait for your opponent to attack..."
  echo
  # Call gitwar to wait for opponent
  ../gitwar -w

  echo

  loop
else
  attack=''
  while [[ "$attack" != "J" && "$attack" != "H" && "$attack" != "U" && "$attack" != "L" ]]; do
    if ! [ -z "$attack" ]; then
      echo
      echo "Incorrect attack syntax. Please try again."
    fi
    echo "How would you like to attack?"
    echo "H - Haymaker, U - Uppercut"
    echo -n "L - Left Hook, J - Jab: "
    read attack
  done
  echo

  performAttack $attack
  echo "`date "+%Y-%m-%d %H:%M:%S %z"`,$me,$attack,$attackResult" >> gitwar.log
  echo

  # Call gitwar to give opponent a turn
  getRecentEvent
  checkGameOver
  ../gitwar "$recentEvent"

  echo

  loop
fi

while [ 1 = 1 ]; do
  echo -n ""
done

# function restoreState {
  # Reading in gitwar.log
  # sed 1d "$logfile" | while IFS=, read date uname action result; do
  #   echo "$uname executed $action and got back $result at $date"
  # done

  # Reading in gitwar.score
  # while IFS="\n" read line; do
  #   echo "$line" | while IFS=" " read uname score; do
  #     echo "$uname scored $score"
  #   done
  # done < gitwar.score
# }

# if [ "$length" -gt 2 ]; then
  # restoreState
# fi

