#!/bin/bash

# Gracefully shutdown game
function closeGame {
  echo
  echo -n "Are you sure you want to exit? (y/N): "
  read allDone
  if [ "$allDone" = "y" ]; then
    exit
  fi
}

# trap "closeGame;" INT

declare -A attackTable

function performAttack {
  hit=0
  if [ "$1" = "U" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 8 ]; then
      hit=$[ ( $RANDOM % 10 ) + 16 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  elif [ "$1" = "L" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 6 ]; then
      hit=$[ ( $RANDOM % 10 ) + 11 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  elif [ "$1" = "J" ]; then
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 4 ]; then
      hit=$[ ( $RANDOM % 10 ) + 8 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  else
    rand=$[ ( $RANDOM % 10 ) + 1 ]
    if [ "$rand" -gt 9 ]; then
      hit=$[ ( $RANDOM % 10 ) + 21 ]
      attackResult="HIT $hit"
    else
      attackResult="MISS"
    fi
  fi
  if [ "$hit" != "0" ]; then
    echo "HIT!"
    opponentScore=`expr $opponentScore - $hit`
    echo "$opponent's health is now $opponentScore"
  else
    echo "MISS!"
    echo "$opponent's health is still $opponentScore"
  fi
}

function calculateOpponentScore {
  while read line; do
    opponentLine=`echo "$line" | grep "$1"`
    if ! [ -z "$opponentLine" ]; then
      hit=`echo "$line" | cut -d, -f4 | cut -d" " -f1`
      damage=`echo "$line" | cut -d"," -f4 | cut -d" " -f2`
      if [ "$hit" = "HIT" ]; then
        opponentScore=`expr $opponentScore - $damage`
      fi
    fi
  done < <( sed 1d "$logfile" )
}

echo
echo "[GITFIGHT!]"
echo


# Initialize some stuff
logfile="gitwar.log"
log=`cat gitwar.log`
me=`git config --global "user.name"`
users=`cat .gitwar`

# Check that the user can play and get the opponent's score
user1=`echo $users | cut -d" " -f1`
user2=`echo $users | cut -d" " -f2`
opponentScore=100
if [ "$me" = "$user1" ]; then
  opponent="$user2"
  calculateOpponentScore "$user1" #calculate based on my previous hits
elif [ "$me" = "$user2" ]; then
  opponent="$user1"
  calculateOpponentScore "$user2" #calculate based on my previous hits
else
  echo "You are not a player in this game. Check your git config for your 'user.name' setting. It should match one of the names in the gitwar.score file"
  echo
  exit
fi

# If the player actually belongs in the game welcome them and
# ask what attack they'd like to perform
echo "Welcome back $me!"
echo

justWent=`tail -1 gitwar.log | grep $me`

if ! [ -z "$justWent" ]; then
  echo "Looks like it's not your turn. Please wait for your opponent to attack..."
  # Call gitwar to wait for opponent
else
  echo "How would you like to attack?"
  echo "H - Haymaker, U - Uppercut"
  echo -n "L - Left Hook, J - Jab: "
  read attack
  echo

  while [[ "$attack" != "H" && "$attack" && "U" && "$attack" = "L" ]]; do
    echo "Incorrect attack syntax. Please try again."
    echo -n "How would you like to attack? (<strength> <attack>): "
    read attack
  done

  performAttack $attack
  echo "`date "+%Y-%m-%d %H:%M:%S %z"`,$me,$attack,$attackResult" >> gitwar.log
  echo -n "$score" | sed "s/$opponent [0-9]*/$opponent $opponentScore/" > gitwar.score
  # Call gitwar to give opponent a turn
  ../core/gitwar
fi

while [ 1 = 1 ]; do
  echo -n ""
done

# function restoreState {
  # Reading in gitwar.log
  # sed 1d "$logfile" | while IFS=, read date uname action result; do
  #   echo "$uname executed $action and got back $result at $date"
  # done

  # Reading in gitwar.score
  # while IFS="\n" read line; do
  #   echo "$line" | while IFS=" " read uname score; do
  #     echo "$uname scored $score"
  #   done
  # done < gitwar.score
# }

# if [ "$length" -gt 2 ]; then
  # restoreState
# fi

